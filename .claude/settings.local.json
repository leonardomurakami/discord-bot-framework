{
  "permissions": {
    "allow": [
      "WebFetch(domain:arc.hypergonial.com)",
      "WebSearch",
      "Bash(docker-compose stop:*)",
      "WebFetch(domain:hikari-lightbulb.readthedocs.io)",
      "WebFetch(domain:miru.hypergonial.com)",
      "Bash(python run_tests.py:*)",
      "Bash(python -m pytest tests/unit/bot/ --cov=bot --cov-report=term-missing -v)",
      "Bash(uv pip install:*)",
      "Bash(uv run:*)",
      "Bash(python -m pytest tests/unit/plugins/moderation/test_moderation_plugin.py::TestKickMemberExtended::test_kick_member_invalid_member_id -v)",
      "Bash(python -m pytest tests/unit/plugins/moderation/test_moderation_plugin.py::TestKickMemberExtended::test_kick_member_invalid_member_id tests/unit/plugins/moderation/test_moderation_plugin.py::TestKickMemberExtended::test_kick_member_bot_target_error tests/unit/plugins/moderation/test_moderation_plugin.py::TestKickMemberExtended::test_kick_member_forbidden_error tests/unit/plugins/moderation/test_moderation_plugin.py::TestKickMemberExtended::test_kick_member_general_exception -v --tb=short)",
      "WebFetch(domain:hikari-ongaku.readthedocs.io)",
      "WebFetch(domain:ongaku.mplaty.com)",
      "Bash(mkdir:*)",
      "WebFetch(domain:lavalink.readthedocs.io)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.hikari-py.dev)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(python:*)",
      "Bash(find:*)",
      "WebFetch(domain:discord.com)",
      "WebFetch(domain:docs.authlib.org)",
      "Bash(DATABASE_URL=\"sqlite:///data/bot.db\" python -c \"import sys; print(''Testing with SQLite:''); from bot.core.bot import DiscordBot; print(''‚úÖ Bot core imports successfully with SQLite'')\")",
      "Bash(timeout 60 uv run pytest:*)",
      "Bash(DATABASE_URL=\"sqlite:///data/bot.db\" python -c \"\nimport sys\nprint(''Testing with SQLite:'')\nfrom bot.core.bot import DiscordBot\nprint(''‚úÖ Bot core imports successfully with SQLite'')\n\")",
      "Bash(DATABASE_URL=\"sqlite:///data/bot.db\" python -c \"\nimport asyncio\nfrom bot.database.manager import db_manager\nfrom bot.database.models import MusicQueue, MusicSession, Guild\nfrom sqlalchemy import select\n\nasync def test_db_operations():\n    print(''üóÑÔ∏è Testing database operations for music web panel...'')\n    \n    # Test database connection\n    try:\n        async with db_manager.session() as session:\n            # Try to query guilds table\n            result = await session.execute(select(Guild).limit(1))\n            guild = result.scalar_one_or_none()\n            print(''‚úÖ Database connection successful'')\n            \n            # Test MusicQueue table operations\n            test_guild_id = 123456789\n            \n            # Insert test queue entry\n            test_queue = MusicQueue(\n                guild_id=test_guild_id,\n                position=0,\n                track_identifier=''test123'',\n                track_title=''Test Track'',\n                track_author=''Test Artist'',\n                track_duration=180000,\n                track_uri=''https://test.com/track'',\n                requester_id=987654321\n            )\n            session.add(test_queue)\n            await session.commit()\n            print(''‚úÖ MusicQueue insert successful'')\n            \n            # Query test queue entry\n            queue_result = await session.execute(\n                select(MusicQueue).filter_by(guild_id=test_guild_id).order_by(MusicQueue.position)\n            )\n            queue_tracks = queue_result.scalars().all()\n            print(f''‚úÖ MusicQueue query successful - Found {len(queue_tracks)} tracks'')\n            \n            # Test MusicSession table operations\n            test_session = MusicSession(\n                guild_id=test_guild_id,\n                voice_channel_id=111222333,\n                text_channel_id=444555666,\n                volume=75,\n                repeat_mode=''track'',\n                shuffle_enabled=True\n            )\n            session.add(test_session)\n            await session.commit()\n            print(''‚úÖ MusicSession insert successful'')\n            \n            # Query test session entry\n            session_result = await session.execute(select(MusicSession).filter_by(guild_id=test_guild_id))\n            music_session = session_result.scalar_one_or_none()\n            if music_session:\n                print(f''‚úÖ MusicSession query successful - Volume: {music_session.volume}, Repeat: {music_session.repeat_mode}'')\n            \n            # Cleanup test data\n            await session.execute(select(MusicQueue).filter_by(guild_id=test_guild_id))\n            await session.execute(select(MusicSession).filter_by(guild_id=test_guild_id))\n            queue_delete = await session.execute(select(MusicQueue).filter_by(guild_id=test_guild_id))\n            for track in queue_delete.scalars():\n                await session.delete(track)\n            session_delete = await session.execute(select(MusicSession).filter_by(guild_id=test_guild_id))\n            for s in session_delete.scalars():\n                await session.delete(s)\n            await session.commit()\n            print(''‚úÖ Test data cleanup successful'')\n            \n    except Exception as e:\n        print(f''‚ùå Database test failed: {e}'')\n        return False\n    \n    return True\n\nsuccess = asyncio.run(test_db_operations())\nprint(f''\\nüìä Database operations test: {\"\"PASSED\"\" if success else \"\"FAILED\"\"}'')\")"
    ],
    "deny": [],
    "ask": []
  }
}